
library IEEE;
use IEEE.std_logic_1164.all;

use work.all;


entity part3 is
  generic(N : integer := 32);
  
  port(reg1           :in std_logic_vector(4 downto 0);
      reg2            : in std_logic_vector(4 downto 0);
  read_addr1         : in std_logic_vector(4 downto 0);
  result              : in std_logic_vector(4 downto 0);
       read_addr2         : in std_logic_vector(4 downto 0);
       w_addr              : in std_logic_vector(4 downto 0);
       w_en                : in     std_logic;
       imm           : in std_logic_vector(15 downto 0);
       ALU_OP               :in std_logic;
       destination              :  in std_logic;
       Alu_src              :in std_logic;
       mem_wren             : in std_logic;
       ALU_or_mem           : in std_logic;
        Load_unsigned      :in std_logic;
        
        clk                 :in std_logic
      
       
       );
end part3;

architecture structure of part3 is


component register_file 
  
    port(rs_adder      : in std_logic_vector(4 downto 0);
       rt_adder         : in std_logic_vector(4 downto 0);
       w_data         : in std_logic_vector(31 downto 0);
       w_adder         : in std_logic_vector(4 downto 0);
       w_en         : in std_logic;
       clock         :in std_logic;
       reset          : in std_logic;
       rs            : out std_logic_vector(31 downto 0);
       rt             : out std_logic_vector(31 downto 0)
       );
end component;

component n_multiplexer_dataflow is
generic(N : integer := 32);
 port(i_S   : in std_logic;
      iX1 		: in std_logic_vector(N-1 downto 0);
      iX2 	:	in std_logic_vector(N-1 downto 0);
      oY 	: out std_logic_vector(N-1 downto 0));

end component;


component AddSub_n is
  generic(N : integer := 32);
  
   port(nAdd_Sub : in std_logic;
       A         : in std_logic_vector(N-1 downto 0);
       B         : in std_logic_vector(N-1 downto 0);
       Y         : out std_logic;
       Z         : out std_logic_vector(N-1 downto 0)
       );
  
end component;


component Sign_extend is

  port(input          : in std_logic_vector(7 downto 0);
       sign          : in std_logic;
       output          : out std_logic_vector(15 downto 0));

end  component;

component multiplexer_16bit is

  port(i_S              : in std_logic_vector(1 downto 0);
       iX1 		           : in std_logic_vector(15 downto 0);
       iX2 		           : in std_logic_vector(15 downto 0);
        oY 		           : out std_logic_vector(15 downto 0)  
          );

end component;



component Sign_extend_32 is

  port(input          : in std_logic_vector(15 downto 0);
       sign          : in std_logic;
       output          : out std_logic_vector(31 downto 0));

end  component;


component mem is
	generic(depth_exp_of_2 	: integer := 10;
			mif_filename 	: string := "mem.mif");
	port   (address			: IN STD_LOGIC_VECTOR (depth_exp_of_2-1 DOWNTO 0) := (OTHERS => '0');
			byteena			: IN STD_LOGIC_VECTOR (3 DOWNTO 0) := (OTHERS => '1');
			clock			: IN STD_LOGIC := '1';
			data			: IN STD_LOGIC_VECTOR (31 DOWNTO 0) := (OTHERS => '0');
			wren			: IN STD_LOGIC := '0';
			q				: OUT STD_LOGIC_VECTOR (31 DOWNTO 0));         
end component;

component mux4to1 is 
   generic(N : integer := 32);
port( A,B,C,D: in std_logic_vector(N-1 downto 0);
                  S: in std_logic_vector(1 downto 0);
                 O: out std_logic_vector(N-1 downto 0)
                 );

end component;


component multiplexer_dataflow is

  port(i_S              : in std_logic;
       iX1 		           : in std_logic;
       iX2 		           : in std_logic;
        oY 		           : out std_logic);

end component;

component mux3to1 is 
   generic(N : integer := 32);
port( A,B,C: in std_logic_vector(N-1 downto 0);
                  S: in std_logic_vector(1 downto 0);
                 O: out std_logic_vector(N-1 downto 0)
                 );
end component;


signal s_mux1, s_mux2, s_mux3,s_mux4,s_mux5,s_mux6 ,s_mux7 , s_reg1,s_reg2     :  std_logic_vector(N-1 downto 0);
 
 signal s_Mux8 , s_Mux_8_inp1,s_Mux_8_inp2,s_Mux_8_inp3,s_Mux_8_inp     :std_logic_vector(7 downto 0);
 signal s_hw1 , s_hw2 ,s_temp1,s_temp2  ,s_Mux_output                                                   :std_logic_vector(15 downto 0);
 
  signal s_signExtend1, s_signExtend2,s_signExtend3, s_Un_signExtend1,s_Un_signExtend2  ,s_r_data    :  std_logic_vector(N-1 downto 0);
  
  signal s_ALU_Out          :       std_logic_vector(31 downto 0);
   signal s_ALU_Out2          :       std_logic_vector(1 downto 0);
   signal sign              : std_logic  := '0';
  signal unsign              : std_logic  := '1';
  
  
  
  begin
    
    n_multiplexer1: n_multiplexer_dataflow 
 port MAP(
             i_S              => destination,
            iX1              => reg1,
            iX2              => result,
            oY              => s_mux2);
            
    register_file1: register_file 
   port MAP(
             rs_adder    => read_addr1,
       rt_adder          => read_addr2,
       w_data            => s_mux1,
       w_adder           => s_mux2,
       w_en              => w_en,
       clock             => clk,
       reset             => sign,
       rs                =>s_reg1,
       rt                => s_reg2
             
           );
           
extender1: Sign_extend_32 
 port MAP(
            input              => imm,
            sign             => sign,
            output             => s_signExtend1
           );
            
n_multiplexer2:  n_multiplexer_dataflow 
 port MAP(
             i_S              => Alu_src,
            iX1              => reg2,
            iX2              => s_signExtend1,
            oY              => s_mux3);
            
            
                     
    adder_subtractor : AddSub_n
     port MAP(
             nAddSub          => ALU_OP,
             A               => reg1,
             B               => s_mux3,
             Y               => sign,
             Z               => s_ALU_Out 
             
             
            );
            

  
             
     n_multiplexer3: n_multiplexer_dataflow
 port MAP(
             i_S              => ALU_or_mem,
            iX1              => s_ALU_Out ,
            iX2              => s_mux7,
            oY              => s_mux1);
            
            
          
     memory: mem
 port MAP(
             address	              => s_ALU_Out,
            byteena              => "1111" ,
            clock              => clk,
            wren	             =>  mem_wren ,
            data              => s_reg2,
            q              => s_r_data);
            
            
  -----  n_mux4to1: mux4to1
   ----  port MAP(
          ---   A              => (s_Mux_8_inp1 <= s_r_data(7 downto 0)),
         ---   B               => (s_Mux_8_inp1 <= s_r_data(15 downto 8)),
         --  C               =>   (s_Mux_8_inp1 <= s_r_data(23 downto 16)),
         --   D              =>   (s_Mux_8_inp1 <= s_r_data(31 downto 17)),
         --   S              =>   s_ALU_Out2 ,
            
          --  O              => s_Mux8);
            
            
                 
    extender2: Sign_extend
 port MAP(
            input              => s_Mux8,
            sign             => sign,
            output             => s_temp1
           );
            
  

               
    extender3: Sign_extend
 port MAP(
            input              => s_Mux8,
            sign             => unsign,
            output             => s_temp2
           );
       extender4: Sign_extend_32
 port MAP(
            input              => s_temp1,
            sign             => sign,
            output             =>s_Un_signExtend1 
           );        
   
    extender5: Sign_extend_32
 port MAP(
            input              => s_temp2,
            sign             => unsign  ,
            output             =>s_signExtend2 
           );   
           
            
     n_multiplexer4: n_multiplexer_dataflow
 port MAP(
             i_S              => Load_unsigned ,
            iX1              => s_Un_signExtend1,
            iX2              => s_signExtend2 ,
            oY              => s_mux4);   
            
                        
    --- n_multiplexer5: multiplexer_16bit
 ---port MAP(
           --  i_S              =>  s_ALU_Out2,
          --  iX1              => (s_hw1 <= s_r_data(15 downto 0)),
         --   iX2              => (s_hw2 <=  s_r_data(31 downto 16)),
           -- oY              => s_Mux_output);  
            
            
     extender6: Sign_extend_32
 port MAP(
            input              =>s_Mux_output ,
            sign             => sign,
            output             =>s_Un_signExtend2 
           );        
   
    extender7: Sign_extend_32
 port MAP(
            input              => s_Mux_output,
            sign             => unsign  ,
            output             =>s_signExtend3 
           );   
           
    
           
     n_multiplexer7: n_multiplexer_dataflow
 port MAP(
             i_S              => Load_unsigned  ,
            iX1              => s_signExtend3,
            iX2              => s_Un_signExtend2  ,
            oY              => s_mux5); 
            
            
            
             
     n_multiplexer8: mux3to1
 port MAP(
             A              =>  s_mux5 ,
            B              => s_r_data  ,
            C              =>   s_mux4 ,
            S               =>  s_ALU_Out2 ,
            O              => s_mux7); 
            
  
                    
  
  
            


end structure;

