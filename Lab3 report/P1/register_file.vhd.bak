-------------------------------------------------------------------------
-- Souparni Agnihotri
-------------------------------------------------------------------------


-- register_file.vhd
-------------------------------------------------------------------------
-------------------------------------------------------------------------
use work.all;
library IEEE;
use IEEE.std_logic_1164.all;
use work.array2D.all;

entity register_file is
  
  generic(N : integer := 32);

  port(rs_adder      : in std_logic_vector(4 downto 0);
       rt_adder         : in std_logic_vector(4 downto 0);
       w_data         : in std_logic_vector(31 downto 0);
       w_adder         : in std_logic_vector(4 downto 0);
       w_en         : in std_logic;
       clock         :in std_logic;
       reset          : in std_logic;
       rs            : out std_logic_vector(31 downto 0);
       rt             : out std_logic_vector(31 downto 0));

end register_file;

architecture dataflow of register_file is
  
  
component and2
  
  port(i_A          : in std_logic;
       i_B          : in std_logic;
       o_F          : out std_logic);
       
end component;
  
 component decoder
   
  port(D_IN   : in  std_logic_vector(4 downto 0);
       SX_OUT : out std_logic_vector(31 downto 0));

 end component;
 

 component dff_register
   generic(N : integer := 32);
   
  port(i_CLK        : in std_logic;     -- Clock input
       i_RST        : in std_logic;     -- Reset input
       i_WE         : in std_logic;     -- Write enable input
       i_D          : in std_logic_vector(N-1 downto 0);     -- Data value input
       o_Q          : out std_logic_vector(N-1 downto 0));   -- Data value outpu);
       
 end component;

 component my_32t1_mux 
 

  port(D_IN   : in  array32_bit(31 downto 0);
       sel: in std_logic_vector(4 downto 0);
       MX_OUT : out std_logic_vector(31 downto 0));

 end component;

signal sValue_decoder, sValue_And: std_logic_vector(31 downto 0);
signal  sValue_register : array32_bit(31 downto 0);
  

  begin
   ---------------------------------------------------------------------------
  -- Level 1: Calculate output of decoder
  ---------------------------------------------------------------------------
  
  decoder_1 : my_decoder
  
  port MAP(D_IN    => w_adder,
          SX_OUT    => sValue_decoder);
        
           
  ---------------------------------------------------------------------------
  -- Level 2: Calculate register
  ---------------------------------------------------------------------------
  
G1: for i in 0 to N-1 generate 
  
  and_1: and2
  
  port MAP(i_A       => sValue_decoder(i),
       i_B          => w_en,
       o_F          => sValue_And(i));
  
  register_1 : dff_register
  
  port MAP(i_CLK    => clock,
       i_RST        => reset,     -- Reset input
       i_WE         => sValue_And(i),  -- Write enable input
       i_D          => w_data,     -- Data value input
       
       o_Q          => sValue_register(i));
       
       
 
           
  ---------------------------------------------------------------------------
  -- Level 3: Putting Values into the multiplexer
  ---------------------------------------------------------------------------  
        
  multiplexer_1 : my_32t1_mux 
  
  port MAP(D_IN   => sValue_register,
       sel        => rs_adder,
       MX_OUT     => rs);
           
           
  multiplexer_2 : my_32t1_mux 
  
  port MAP(D_IN   => sValue_register,
       sel        => rt_adder,
       MX_OUT     => rt);
       
end generate;
  
end dataflow;